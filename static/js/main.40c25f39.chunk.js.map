{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.jsx","Components/Track/Track.jsx","Components/TrackList/TrackList.jsx","Components/SearchResults/SearchResults.jsx","Components/Playlist/Playlist.jsx","Components/App/App.jsx","serviceWorker.js","index.js"],"names":["accessToken","expires_in","SearchBar","props","state","term","search","bind","handleTermChange","e","this","setState","target","value","onSearch","className","onChange","placeholder","onClick","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","artist","album","name","renderAction","TrackList","tracks","map","key","id","React","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","console","log","expires_in_data","Number","setTimeout","history","pushState","urlToToken","searchUrl","fetch","headers","then","response","json","jsonResponse","items","artists","uri","savePlaylist","nameOfPlaylist","trackURI","userID","method","body","JSON","stringify","playlistsID","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filteredArray","filter","searchTerm","results","trackURIs","i","length","addEventListener","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40c25f39.chunk.js","sourcesContent":["let accessToken;\r\nlet expires_in;\r\nconst cliendID = '32b49adec71a4c0eae6a66fa1227222c';\r\n//const clientSecret = '863e0cccd5474d3c846114d5d6153408';\r\nlet redirect_uri = 'https://psevdon1m.github.io/jam';\r\n// let redirect_uri = \"http://localhost:3000/jam\";\r\n\r\n\r\n\r\n\r\nconst Spotify = {\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        };\r\n         \r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        console.log('AccessTokenMatch Full'+ accessTokenMatch);\r\n       // console.log('AccessTokenMatch [1]'+ accessTokenMatch[1]);\r\n        const expires_in_data = window.location.href.match(/expires_in=([^&]*)/);\r\n        console.log('Expires in data Full'+ expires_in_data);\r\n       // console.log('Epires in data [1]'+ expires_in_data[1]);\r\n       \r\n\r\n        if(accessTokenMatch && expires_in_data){\r\n\r\n            accessToken = accessTokenMatch[1];\r\n            expires_in = Number(expires_in_data[1]);\r\n            // This clears the parameters, allowing us ot grab a new access token when it expires\r\n            window.setTimeout(()=> accessToken = '', expires_in*1000);\r\n            window.history.pushState('AccessToken', null, \"/\")\r\n            return accessToken;\r\n        }else {\r\n            const urlToToken = `https://accounts.spotify.com/authorize?client_id=${cliendID}&redirect_uri=${redirect_uri}&scope=user-read-private%20user-read-email%20playlist-modify-public&response_type=token`;\r\n            window.location.href = urlToToken;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n            const accessToken = Spotify.getAccessToken();\r\n            const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term}`;\r\n            return fetch(searchUrl, {headers:{'Authorization': `Bearer ${accessToken}`}}).then((response) => {\r\n                return response.json()}).then((jsonResponse) => {\r\n                    try {\r\n                        if(jsonResponse.tracks){\r\n                            return jsonResponse.tracks.items.map(track => {\r\n                                console.log(jsonResponse)\r\n                               return {\r\n                                   id: track.id,\r\n                                   name: track.name,\r\n                                   artist: track.artists[0].name,\r\n                                   album: track.album.name,\r\n                                   uri: track.uri\r\n                            } \r\n                            })\r\n                        }else {\r\n                            return [];\r\n                        }\r\n                    } catch(e) {\r\n                        console.log(e)\r\n                    }\r\n                });\r\n                \r\n                \r\n            },\r\n        savePlaylist(nameOfPlaylist, trackURI){\r\n            if(!nameOfPlaylist && !trackURI){\r\n                return;\r\n            }\r\n            let userID;\r\n            const accessToken = Spotify.getAccessToken();\r\n            const userNameUrl =  `https://api.spotify.com/v1/me`;\r\n            \r\n            \r\n            \r\n            \r\n            return fetch(userNameUrl, {headers:{'Authorization': `Bearer ${accessToken}`}}).then((response) => {\r\n                return response.json()}).then((jsonResponse) => {\r\n                    try {\r\n                        if(jsonResponse){{\r\n                               userID = jsonResponse.id;\r\n                               console.log('User ID ' + userID)\r\n                               return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {headers:{'Authorization': `Bearer ${accessToken}`},\r\n                                method:'POST',\r\n                                body: JSON.stringify({ name: nameOfPlaylist })\r\n                            }).then(response => response.json()).then(jsonResponse => {\r\n                                const playlistsID = jsonResponse.id;\r\n                                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistsID}/tracks`, {headers:{'Authorization': `Bearer ${accessToken}`},\r\n                                 method:'POST',\r\n                                 body: JSON.stringify({ uris: trackURI })\r\n\r\n                            })\r\n                        })}\r\n                        }else {\r\n                            return [];\r\n                        }\r\n                    } catch(e) {\r\n                        console.log(e)\r\n                    }\r\n                })\r\n           \r\n            \r\n        }\r\n}\r\n\r\nexport default Spotify;\r\n\r\n","import React, { Component } from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            term: ''\r\n        }\r\n        \r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value});\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input \r\n                onChange={this.handleTermChange}\r\n                placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React, { Component } from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this)\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track)\r\n    }\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n           return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n   \r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.artist} | {this.props.track.album}</h3>\r\n                    <p>{this.props.track.name}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    \r\n    render(){\r\n       \r\n        return (\r\n            <div className=\"TrackList\">\r\n                 {this.props.tracks.map((track) => {\r\n                     return <Track \r\n                     track={track} key={track.id}\r\n                     onAdd={this.props.onAdd}\r\n                     onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}\r\n                      />\r\n                 })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React, { Component } from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends Component {\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                isRemoval={false}\r\n                onAdd={this.props.onAdd}\r\n                tracks={this.props.searchResults} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React , { Component } from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass Playlist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value)\r\n    }\r\n\r\n   \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'}\r\n                onChange={this.handleNameChange}\r\n                />\r\n                <TrackList \r\n                tracks={this.props.playlistTracks}\r\n                onRemove={this.props.onRemove} \r\n                isRemoval={true}\r\n                \r\n                />\r\n                \r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React, { Component } from 'react';\r\nimport \"./App.css\"\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchResults: [],\r\n            playlistName: \"\",\r\n            playlistTracks: []\r\n        }\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n        this.savePlaylist = this.savePlaylist.bind(this);\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n\r\n    addTrack(track) {\r\n        if(this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)){\r\n            return;\r\n        }\r\n            this.state.playlistTracks.push(track);\r\n            this.setState({playlistTracks: this.state.playlistTracks});\r\n        }\r\n\r\n    removeTrack(track) {\r\n        let filteredArray = this.state.playlistTracks.filter((savedTrack)=> savedTrack.id !== track.id)\r\n        this.setState({playlistTracks: filteredArray});\r\n    }\r\n    \r\n    updatePlaylistName(nameOfPlaylist){\r\n        this.setState({playlistName: nameOfPlaylist})\r\n    }\r\n\r\n    search(searchTerm){\r\n       Spotify.search(searchTerm).then((results) => {\r\n           console.log(results)\r\n           this.setState({searchResults: results})\r\n           \r\n       })\r\n    }\r\n\r\n    savePlaylist(){\r\n        \r\n        console.log('before trackURI')\r\n\r\n        let trackURIs = [];\r\n        for(let i = 0; i < this.state.playlistTracks.length; i++) {\r\n            trackURIs.push(this.state.playlistTracks[i].uri)\r\n        }\r\n        \r\n        console.log('after' + trackURIs)\r\n        Spotify.savePlaylist(this.state.playlistName, trackURIs).then(()=> {\r\n            this.setState({playlistName: 'New Playlist',\r\n        playlistTracks: []})})\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('load', ()=> {Spotify.getAccessToken()})\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <div>\r\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n                <div className=\"App\">\r\n                    <SearchBar onSearch={this.search} />\r\n                    <div className=\"App-playlist\">\r\n                        <SearchResults \r\n                        onAdd={this.addTrack}\r\n                        searchResults={this.state.searchResults} />\r\n                        <Playlist \r\n                        playlistName={this.state.playlistName} \r\n                        playlistTracks={this.state.playlistTracks} \r\n                        onRemove={this.removeTrack}\r\n                        onNameChange={this.updatePlaylistName}\r\n                        onSave={this.savePlaylist}\r\n                         />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}